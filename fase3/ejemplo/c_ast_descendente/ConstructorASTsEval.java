/* Generated By:JavaCC: Do not edit this line. ConstructorASTsEval.java */
package c_ast_descendente;
import asint.ClaseSemanticaEval;
import asint.SintaxisAbstractaEval.Exp;
import asint.SintaxisAbstractaEval.Decs;
import asint.SintaxisAbstractaEval.LDecs;
import asint.SintaxisAbstractaEval.Dec;
import asint.SintaxisAbstractaEval.Prog;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

public class ConstructorASTsEval implements ConstructorASTsEvalConstants {
   private ClaseSemanticaEval sem = new ClaseSemanticaEval();

  final public Prog analiza() throws ParseException {
    trace_call("analiza");
    try {
       Prog prog;
      prog = programa();
      jj_consume_token(0);
             {if (true) return prog;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("analiza");
    }
  }

  final public Prog programa() throws ParseException {
    trace_call("programa");
    try {
      Exp exp; Decs decs;
      exp = expresion();
      decs = declaraciones();
            {if (true) return sem.prog(exp,decs);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("programa");
    }
  }

  final public Exp expresion() throws ParseException {
    trace_call("expresion");
    try {
       Exp exp;
      jj_consume_token(evalua);
      exp = e0();
            {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expresion");
    }
  }

  final public Decs declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {
       LDecs decs;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case donde:
        jj_consume_token(donde);
        decs = lista_declaraciones();
            {if (true) return sem.si_decs(decs);}
        break;
      default:
        jj_la1[0] = jj_gen;
            {if (true) return sem.no_decs();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaraciones");
    }
  }

  final public LDecs lista_declaraciones() throws ParseException {
    trace_call("lista_declaraciones");
    try {
        LDecs decs; Dec dec;
      dec = declaracion();
      decs = rlista_decs(sem.una_dec(dec));
            {if (true) return decs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_declaraciones");
    }
  }

  final public LDecs rlista_decs(LDecs decsh) throws ParseException {
    trace_call("rlista_decs");
    try {
        LDecs decs; Dec dec;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
        dec = declaracion();
        decs = rlista_decs(sem.muchas_decs(decsh,dec));
            {if (true) return decs;}
        break;
      default:
        jj_la1[1] = jj_gen;
            {if (true) return decsh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("rlista_decs");
    }
  }

  final public Dec declaracion() throws ParseException {
    trace_call("declaracion");
    try {
        Token id; Exp exp;
      id = jj_consume_token(iden);
      jj_consume_token(14);
      exp = e0();
           {if (true) return (Dec)sem.dec(id.image,exp).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion");
    }
  }

  final public Exp e0() throws ParseException {
    trace_call("e0");
    try {
         Exp e1,e2;
      e1 = e1();
      e2 = re0(e1);
             {if (true) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e0");
    }
  }

  final public Exp re0(Exp eh) throws ParseException {
    trace_call("re0");
    try {
         String op; Exp e1,e2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
        op = op0();
        e1 = e1();
        e2 = re0(sem.mkop(op,eh,e1));
              {if (true) return e2;}
        break;
      default:
        jj_la1[2] = jj_gen;
              {if (true) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("re0");
    }
  }

  final public Exp e1() throws ParseException {
    trace_call("e1");
    try {
         Exp e1,e2;
      e1 = e2();
      e2 = re1(e1);
              {if (true) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e1");
    }
  }

  final public Exp re1(Exp eh) throws ParseException {
    trace_call("re1");
    try {
         String op; Exp e1,e2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 20:
        op = op1();
        e1 = e2();
        e2 = re1(sem.mkop(op,eh,e1));
               {if (true) return e2;}
        break;
      default:
        jj_la1[3] = jj_gen;
               {if (true) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("re1");
    }
  }

  final public Exp e2() throws ParseException {
    trace_call("e2");
    try {
        Token t; Exp e;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case iden:
        t = jj_consume_token(iden);
           {if (true) return (Exp)sem.iden(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
      case lit_ent:
        t = jj_consume_token(lit_ent);
           {if (true) return (Exp)sem.lit_ent(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
      case lit_real:
        t = jj_consume_token(lit_real);
           {if (true) return (Exp)sem.lit_real(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
      case 15:
        jj_consume_token(15);
        e = e0();
        jj_consume_token(16);
           {if (true) return e;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("e2");
    }
  }

  final public String op0() throws ParseException {
    trace_call("op0");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
          {if (true) return "+";}
        break;
      case 18:
        jj_consume_token(18);
          {if (true) return "-";}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op0");
    }
  }

  final public String op1() throws ParseException {
    trace_call("op1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
           {if (true) return "*";}
        break;
      case 20:
        jj_consume_token(20);
           {if (true) return "/";}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("op1");
    }
  }

  /** Generated Token Manager. */
  public ConstructorASTsEvalTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x2000,0x60000,0x180000,0x9c00,0x60000,0x180000,};
   }

  /** Constructor with InputStream. */
  public ConstructorASTsEval(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstructorASTsEval(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConstructorASTsEvalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstructorASTsEval(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstructorASTsEvalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstructorASTsEval(ConstructorASTsEvalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstructorASTsEvalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
