
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package c_ast_ascendente;

import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConstructorASTTiny extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public ConstructorASTTiny() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConstructorASTTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\010\005\000\002" +
    "\011\006\000\002\012\005\000\002\012\004\000\002\013" +
    "\003\000\002\013\005\000\002\014\005\000\002\014\004" +
    "\000\002\015\003\000\002\016\006\000\002\016\003\000" +
    "\002\017\003\000\002\017\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\004\000\002\021\005\000\002\022\003" +
    "\000\002\022\005\000\002\023\004\000\002\024\003\000" +
    "\002\024\002\000\002\025\003\000\002\025\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\004\000\002\030\005\000\002" +
    "\031\007\000\002\032\005\000\002\033\004\000\002\034" +
    "\004\000\002\035\003\000\002\036\004\000\002\037\004" +
    "\000\002\041\003\000\002\040\005\000\002\064\005\000" +
    "\002\064\004\000\002\065\003\000\002\065\005\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\042\003\000\002\044\003\000\002\044\005\000" +
    "\002\045\003\000\002\045\005\000\002\046\003\000\002" +
    "\046\005\000\002\046\005\000\002\047\003\000\002\047" +
    "\005\000\002\047\005\000\002\050\003\000\002\050\005" +
    "\000\002\051\003\000\002\051\004\000\002\052\003\000" +
    "\002\052\006\000\002\052\005\000\002\052\004\000\002" +
    "\053\005\000\002\053\003\000\002\054\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\056\003\000" +
    "\002\057\003\000\002\060\003\000\002\061\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\063" +
    "\003\000\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\032\006\001\002\000\004\002\243\001" +
    "\002\000\004\002\001\001\002\000\052\004\023\005\025" +
    "\006\014\007\017\010\ufffd\012\ufffd\013\013\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\020\022\ufffd\023\022" +
    "\032\ufffd\033\ufffd\036\ufffd\037\015\044\007\001\002\000" +
    "\020\004\023\005\025\006\014\007\017\013\013\037\015" +
    "\044\007\001\002\000\006\026\ufff8\034\ufff8\001\002\000" +
    "\006\026\ufffa\034\ufffa\001\002\000\004\037\241\001\002" +
    "\000\004\032\231\001\002\000\010\035\uffe9\037\uffe9\043" +
    "\uffe9\001\002\000\010\035\uffe5\037\uffe5\043\uffe5\001\002" +
    "\000\006\026\ufffc\034\ufffc\001\002\000\010\035\uffe6\037" +
    "\uffe6\043\uffe6\001\002\000\020\004\023\005\025\006\014" +
    "\007\017\013\013\037\015\044\007\001\002\000\006\026" +
    "\ufff9\034\ufff9\001\002\000\004\037\210\001\002\000\010" +
    "\035\uffe7\037\uffe7\043\uffe7\001\002\000\010\035\uffeb\037" +
    "\uffeb\043\uffeb\001\002\000\010\035\uffe8\037\uffe8\043\uffe8" +
    "\001\002\000\030\010\052\012\046\014\060\015\063\016" +
    "\041\017\053\020\066\022\045\032\006\033\uffde\036\064" +
    "\001\002\000\010\035\uffec\037\uffec\043\uffec\001\002\000" +
    "\010\035\uffee\037\uffee\043\035\001\002\000\006\026\032" +
    "\034\033\001\002\000\024\004\023\005\025\006\014\007" +
    "\017\013\013\021\020\023\022\037\015\044\007\001\002" +
    "\000\030\010\ufffe\012\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\022\ufffe\032\ufffe\033\ufffe\036\ufffe\001\002" +
    "\000\006\026\ufffb\034\ufffb\001\002\000\004\041\036\001" +
    "\002\000\004\027\037\001\002\000\010\035\uffed\037\uffed" +
    "\043\uffed\001\002\000\004\033\207\001\002\000\026\024" +
    "\101\037\075\040\071\041\111\042\113\046\114\063\073" +
    "\064\112\065\076\066\110\001\002\000\006\026\uffd2\033" +
    "\uffd2\001\002\000\006\026\uffda\033\uffda\001\002\000\006" +
    "\026\uffd7\033\uffd7\001\002\000\004\037\175\001\002\000" +
    "\026\024\101\037\075\040\071\041\111\042\113\046\114" +
    "\063\073\064\112\065\076\066\110\001\002\000\006\026" +
    "\uffd8\033\uffd8\001\002\000\006\026\uffdd\033\uffdd\001\002" +
    "\000\006\026\uffc7\033\uffc7\001\002\000\026\024\101\037" +
    "\075\040\071\041\111\042\113\046\114\063\073\064\112" +
    "\065\076\066\110\001\002\000\026\024\101\037\075\040" +
    "\071\041\111\042\113\046\114\063\073\064\112\065\076" +
    "\066\110\001\002\000\006\026\uffdb\033\uffdb\001\002\000" +
    "\006\026\uffd6\033\uffd6\001\002\000\006\026\164\033\uffdf" +
    "\001\002\000\006\026\uffd5\033\uffd5\001\002\000\026\024" +
    "\101\037\075\040\071\041\111\042\113\046\114\063\073" +
    "\064\112\065\076\066\110\001\002\000\006\026\uffd1\033" +
    "\uffd1\001\002\000\006\026\uffd9\033\uffd9\001\002\000\026" +
    "\024\101\037\075\040\071\041\111\042\113\046\114\063" +
    "\073\064\112\065\076\066\110\001\002\000\026\024\101" +
    "\037\075\040\071\041\111\042\113\046\114\063\073\064" +
    "\112\065\076\066\110\001\002\000\006\026\uffd4\033\uffd4" +
    "\001\002\000\006\026\uffca\033\uffca\001\002\000\006\026" +
    "\uffd3\033\uffd3\001\002\000\060\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\001\002\000\060\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\001" +
    "\002\000\006\026\uffd0\033\uffd0\001\002\000\026\024\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\046\uff96\063\uff96\064" +
    "\uff96\065\uff96\066\uff96\001\002\000\060\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\001\002\000\060\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\001\002\000\060\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\001" +
    "\002\000\060\025\uffad\026\uffad\027\uffad\030\154\031\uffad" +
    "\032\uffad\033\uffad\043\155\044\156\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\001\002\000" +
    "\052\025\uffaf\026\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\001\002\000\026\024\101\037\075\040\071\041" +
    "\111\042\113\046\114\063\073\064\112\065\076\066\110" +
    "\001\002\000\052\025\uffb2\026\uffb2\027\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\045\uffb2\046\uffb2\047\140\050\145\051\143" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\142\062\146\001\002\000\026\024\101\037\075" +
    "\040\071\041\111\042\113\046\114\063\073\064\112\065" +
    "\076\066\110\001\002\000\040\025\uffb5\026\uffb5\027\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\045\uffb5\046\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002" +
    "\000\040\025\uffb7\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\045\131\046\130\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\001\002\000\034\025\uffb9\026" +
    "\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\052\120\053\125" +
    "\054\121\055\122\056\116\057\123\060\124\001\002\000" +
    "\016\025\uffba\026\uffba\027\uffba\031\uffba\032\uffba\033\uffba" +
    "\001\002\000\060\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002" +
    "\000\060\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000\060" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002\000\060\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\001\002\000\026\024\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\046\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\001\002\000\026\024\101\037\075\040\071" +
    "\041\111\042\113\046\114\063\073\064\112\065\076\066" +
    "\110\001\002\000\026\024\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\046\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\001" +
    "\002\000\026\024\101\037\075\040\071\041\111\042\113" +
    "\046\114\063\073\064\112\065\076\066\110\001\002\000" +
    "\026\024\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\046\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000\026\024" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\046\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\001\002\000\026\024\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\046\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\066\uffa1\001\002\000\026\024\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\046\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\066\uff9f\001\002\000\026\024\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\046\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\001\002\000\026\024\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\046\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\001\002" +
    "\000\016\025\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\001\002\000\040\025\uffb6\026\uffb6\027\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\045\131\046\130\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000\026" +
    "\024\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\046\uff9d\063" +
    "\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002\000\026\024\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\046\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\001\002\000\026\024\101\037\075" +
    "\040\071\041\111\042\113\046\114\063\073\064\112\065" +
    "\076\066\110\001\002\000\026\024\101\037\075\040\071" +
    "\041\111\042\113\046\114\063\073\064\112\065\076\066" +
    "\110\001\002\000\040\025\uffb4\026\uffb4\027\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\045\uffb4\046\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\040" +
    "\025\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\045" +
    "\uffb3\046\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\001\002\000\052\025\uffac\026\uffac\027" +
    "\uffac\031\uffac\032\uffac\033\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\001\002\000\026" +
    "\024\101\037\075\040\071\041\111\042\113\046\114\063" +
    "\073\064\112\065\076\066\110\001\002\000\026\024\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\046\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\001\002\000\026\024\101\037\075" +
    "\040\071\041\111\042\113\046\114\063\073\064\112\065" +
    "\076\066\110\001\002\000\026\024\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\046\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\001\002\000\026\024\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\046\uff98\063\uff98\064\uff98\065\uff98\066\uff98\001" +
    "\002\000\026\024\101\037\075\040\071\041\111\042\113" +
    "\046\114\063\073\064\112\065\076\066\110\001\002\000" +
    "\026\024\uff99\037\uff99\040\uff99\041\uff99\042\uff99\046\uff99" +
    "\063\uff99\064\uff99\065\uff99\066\uff99\001\002\000\026\024" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\046\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\001\002\000\046\025\uffb0\026" +
    "\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\045\uffb0\046\uffb0" +
    "\047\140\050\145\051\143\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\001\002\000\052\025\uffae" +
    "\026\uffae\027\uffae\031\uffae\032\uffae\033\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\001" +
    "\002\000\040\025\uffb1\026\uffb1\027\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\045\uffb1\046\uffb1\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000\004\025\153" +
    "\001\002\000\060\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\001\002" +
    "\000\004\037\161\001\002\000\026\024\101\037\075\040" +
    "\071\041\111\042\113\046\114\063\073\064\112\065\076" +
    "\066\110\001\002\000\060\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\001\002\000\004\027\160\001\002\000\060\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\062\uffaa\001\002\000\060\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\001\002\000\006\026\uffc8\033\uffc8\001\002\000" +
    "\006\026\uffc9\033\uffc9\001\002\000\026\010\052\012\046" +
    "\014\060\015\063\016\041\017\053\020\066\022\045\032" +
    "\006\036\064\001\002\000\006\026\uffdc\033\uffdc\001\002" +
    "\000\006\026\uffcb\033\uffcb\001\002\000\004\032\006\001" +
    "\002\000\010\011\171\026\uffcf\033\uffcf\001\002\000\004" +
    "\032\006\001\002\000\006\026\uffce\033\uffce\001\002\000" +
    "\004\032\006\001\002\000\006\026\uffcd\033\uffcd\001\002" +
    "\000\004\024\176\001\002\000\030\024\101\025\202\037" +
    "\075\040\071\041\111\042\113\046\114\063\073\064\112" +
    "\065\076\066\110\001\002\000\006\026\uffc6\033\uffc6\001" +
    "\002\000\006\025\204\031\203\001\002\000\006\025\uffc3" +
    "\031\uffc3\001\002\000\006\026\uffc4\033\uffc4\001\002\000" +
    "\026\024\101\037\075\040\071\041\111\042\113\046\114" +
    "\063\073\064\112\065\076\066\110\001\002\000\006\026" +
    "\uffc5\033\uffc5\001\002\000\006\025\uffc2\031\uffc2\001\002" +
    "\000\006\026\uffcc\033\uffcc\001\002\000\014\002\uffff\011" +
    "\uffff\026\uffff\033\uffff\034\uffff\001\002\000\004\024\212" +
    "\001\002\000\004\032\006\001\002\000\022\004\023\005" +
    "\025\006\014\007\017\013\013\025\216\037\015\044\007" +
    "\001\002\000\006\025\ufff2\031\ufff2\001\002\000\006\035" +
    "\222\037\223\001\002\000\006\025\220\031\217\001\002" +
    "\000\004\032\ufff3\001\002\000\020\004\023\005\025\006" +
    "\014\007\017\013\013\037\015\044\007\001\002\000\004" +
    "\032\ufff4\001\002\000\006\025\ufff1\031\ufff1\001\002\000" +
    "\004\037\224\001\002\000\006\025\uffef\031\uffef\001\002" +
    "\000\006\025\ufff0\031\ufff0\001\002\000\006\026\ufff5\034" +
    "\ufff5\001\002\000\004\037\227\001\002\000\006\026\ufff6" +
    "\034\ufff6\001\002\000\010\035\uffe4\037\uffe4\043\uffe4\001" +
    "\002\000\020\004\023\005\025\006\014\007\017\013\013" +
    "\037\015\044\007\001\002\000\006\031\236\033\237\001" +
    "\002\000\004\037\235\001\002\000\006\031\uffe2\033\uffe2" +
    "\001\002\000\006\031\uffe0\033\uffe0\001\002\000\020\004" +
    "\023\005\025\006\014\007\017\013\013\037\015\044\007" +
    "\001\002\000\010\035\uffe3\037\uffe3\043\uffe3\001\002\000" +
    "\006\031\uffe1\033\uffe1\001\002\000\006\026\ufff7\034\ufff7" +
    "\001\002\000\010\035\uffea\037\uffea\043\uffea\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\025\005\030\006\015" +
    "\007\010\010\020\011\007\015\011\016\027\017\026\020" +
    "\023\001\001\000\006\017\241\020\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\225\016\027\017" +
    "\026\020\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\050\024\037\025\055\026\047\027\053\030\042" +
    "\031\061\032\046\033\043\034\054\035\056\036\064\037" +
    "\066\040\041\041\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\033\007\010\010" +
    "\020\011\007\015\011\016\027\017\026\020\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\042\205\043\067\044\106\045\105\046\104\047\103\050" +
    "\101\051\077\052\076\053\073\063\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\042\172\043\067\044\106\045\105\046\104" +
    "\047\103\050\101\051\077\052\076\053\073\063\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\042\166\043\067\044\106\045\105\046\104\047" +
    "\103\050\101\051\077\052\076\053\073\063\102\001\001" +
    "\000\030\042\165\043\067\044\106\045\105\046\104\047" +
    "\103\050\101\051\077\052\076\053\073\063\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\042\162\043\067\044\106\045\105" +
    "\046\104\047\103\050\101\051\077\052\076\053\073\063" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\042\161\043\067\044\106\045\105\046\104\047\103\050" +
    "\101\051\077\052\076\053\073\063\102\001\001\000\030" +
    "\042\071\043\067\044\106\045\105\046\104\047\103\050" +
    "\101\051\077\052\076\053\073\063\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\043\067\044\151" +
    "\045\105\046\104\047\103\050\101\051\077\052\076\053" +
    "\073\063\102\001\001\000\010\060\136\061\143\062\140" +
    "\001\001\000\014\043\067\051\135\052\076\053\073\063" +
    "\102\001\001\000\002\001\001\000\006\056\132\057\131" +
    "\001\001\000\006\054\116\055\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\043\067\046" +
    "\126\047\103\050\101\051\077\052\076\053\073\063\102" +
    "\001\001\000\002\001\001\000\026\043\067\044\125\045" +
    "\105\046\104\047\103\050\101\051\077\052\076\053\073" +
    "\063\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\056\132\057\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\043\067" +
    "\047\134\050\101\051\077\052\076\053\073\063\102\001" +
    "\001\000\020\043\067\047\133\050\101\051\077\052\076" +
    "\053\073\063\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\043\067\047\150\050\101" +
    "\051\077\052\076\053\073\063\102\001\001\000\002\001" +
    "\001\000\014\043\067\051\147\052\076\053\073\063\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\043" +
    "\067\050\146\051\077\052\076\053\073\063\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\042\156\043" +
    "\067\044\106\045\105\046\104\047\103\050\101\051\077" +
    "\052\076\053\073\063\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\050\026\164\027" +
    "\053\030\042\031\061\032\046\033\043\034\054\035\056" +
    "\036\064\037\066\040\041\041\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\167\001\001\000\002" +
    "\001\001\000\004\003\171\001\001\000\002\001\001\000" +
    "\004\003\173\001\001\000\002\001\001\000\004\064\176" +
    "\001\001\000\032\042\200\043\067\044\106\045\105\046" +
    "\104\047\103\050\101\051\077\052\076\053\073\063\102" +
    "\065\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\042\204\043\067" +
    "\044\106\045\105\046\104\047\103\050\101\051\077\052" +
    "\076\053\073\063\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\210\001\001\000\004\003\224\001\001\000\016\013\214" +
    "\014\212\015\213\016\027\017\026\020\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\220\015\213\016\027\017\026\020" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\232\016\027\017\026\020\023\022\231\023" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\232\016\027\017" +
    "\026\020\023\023\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConstructorASTTiny$actions {


    ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorASTTiny parser;

  /** Constructor */
  CUP$ConstructorASTTiny$actions(ConstructorASTTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action_part00000000(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.prog(blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTTiny$parser.done_parsing();
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVE_A declaraciones instrucciones LLAVE_C 
            {
              Bloque RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.bloque(decs, instrs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones DOBLEAMPERSAND 
            {
              Decs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_dec(dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= lista_declaraciones PUNTYCOMA declaracion 
            {
              LDecs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_decs(decs, dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= dec_variable 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= dec_tipo 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= dec_procedimiento 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_variable ::= tipo IDEN 
            {
              Dec RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_variable(tipo, id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("dec_variable",5, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_tipo ::= TYPE tipo IDEN 
            {
              Dec RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_tipo(tipo, id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("dec_tipo",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_procedimiento ::= PROC IDEN parametros_form bloque 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Params_form params = (Params_form)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), params, blq).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("dec_procedimiento",7, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_form ::= PAR_A parametros_form_lista PAR_C 
            {
              Params_form RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		LParams_form params = (LParams_form)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_params_form(params); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_form",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_form ::= PAR_A PAR_C 
            {
              Params_form RESULT =null;
		 RESULT = sem.no_params_form(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_form",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_form_lista ::= parametro_form 
            {
              LParams_form RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Param_form param = (Param_form)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_param_form(param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_form_lista",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_form_lista ::= parametros_form_lista COMA parametro_form 
            {
              LParams_form RESULT =null;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		LParams_form lparam = (LParams_form)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Param_form param = (Param_form)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_params_form(lparam, param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_form_lista",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_form ::= tipo AMPERSAND IDEN 
            {
              Param_form RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Param_form)sem.param_form_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametro_form",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro_form ::= tipo IDEN 
            {
              Param_form RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Param_form)sem.param_form_normal(tipo, id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametro_form",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= tipo0 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo;  
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo0 ::= tipo0 CORCH_A LIT_ENTERO CORCH_C 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Tipo)sem.tipo_array(tipo, num.str()).ponFila(num.fila()).ponCol(num.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo0",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo0 ::= tipo1 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo0",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo1 ::= tipo2 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",13, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo1 ::= CAPIROTE tipo1 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.tipo_puntero(tipo); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",13, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo2 ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_int(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo2 ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_real(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo2 ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo2 ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_string(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo2 ::= IDEN 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.tipo_iden(id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo2 ::= STRUCT campos 
            {
              Tipo RESULT =null;
		int camposleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int camposright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.tipo_struct(campos); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // campos ::= LLAVE_A campos_lista LLAVE_C 
            {
              Campos RESULT =null;
		int lcamposleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int lcamposright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		LCampos lcampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.campos(lcampos); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campos",15, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // campos_lista ::= campo 
            {
              LCampos RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_campo(campo); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campos_lista",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // campos_lista ::= campos_lista COMA campo 
            {
              LCampos RESULT =null;
		int lcamposleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int lcamposright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		LCampos lcampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_campos(lcampos, campo); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campos_lista",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // campo ::= tipo IDEN 
            {
              Campo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Campo)sem.campo(tipo, id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campo",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= lista_instrucciones 
            {
              Instrs RESULT =null;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		LInstrs instrs = (LInstrs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_instrs(instrs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= 
            {
              Instrs RESULT =null;
		 RESULT = sem.no_instrs(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_instrucciones ::= instruccion 
            {
              LInstrs RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_instr(instr); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_instrucciones ::= lista_instrucciones PUNTYCOMA instruccion 
            {
              LInstrs RESULT =null;
		int linstrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int linstrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		LInstrs linstrs = (LInstrs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_instrs(linstrs, instr); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= instr_eval 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instr_if 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instr_if_else 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instr_while 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instr_read 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instr_write 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instr_nl 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instr_reserva 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instr_liberacion 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instr_invocacion 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= instr_compuesta 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instr_eval ::= ARROBA expresion 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.eval(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_eval",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instr_if ::= IF expresion bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.if_(exp, blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_if",22, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instr_if_else ::= IF expresion bloque ELSE bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		int blq1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int blq1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Bloque blq1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int blq2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int blq2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Bloque blq2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.if_else(exp, blq1, blq2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_if_else",23, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instr_while ::= WHILE expresion bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.while_(exp, blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_while",24, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instr_read ::= READ expresion 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.read(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_read",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instr_write ::= WRITE expresion 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.write(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_write",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instr_nl ::= NL 
            {
              Instr RESULT =null;
		 RESULT = sem.nl(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_nl",27, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instr_reserva ::= NEW expresion 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.new_(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_reserva",28, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instr_liberacion ::= DELETE expresion 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.delete(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_liberacion",29, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instr_compuesta ::= bloque 
            {
              Instr RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.instr_compuesta(blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_compuesta",31, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instr_invocacion ::= CALL IDEN parametros_reales 
            {
              Instr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Params_reales params = (Params_reales)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Instr)sem.invoc(id.str(), params).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instr_invocacion",30, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_reales ::= PAR_A parametros_reales_lista PAR_C 
            {
              Params_reales RESULT =null;
		int lparamsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int lparamsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		LParams_reales lparams = (LParams_reales)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_params_reales(lparams); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",50, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_reales ::= PAR_A PAR_C 
            {
              Params_reales RESULT =null;
		 RESULT = sem.no_params_reales(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",50, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_reales_lista ::= expresion 
            {
              LParams_reales RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_param_real(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales_lista",51, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_reales_lista ::= parametros_reales_lista COMA expresion 
            {
              LParams_reales RESULT =null;
		int lparamsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int lparamsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		LParams_reales lparams = (LParams_reales)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_params_reales(lparams, exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales_lista",51, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_basica ::= LIT_ENTERO 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.lit_ent(num.str()).ponFila(num.fila()).ponCol(num.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_basica ::= LIT_REAL 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.lit_real(num.str()).ponFila(num.fila()).ponCol(num.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_basica ::= LIT_CADENA 
            {
              Exp RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado cad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.lit_cadena(cad.str()).ponFila(cad.fila()).ponCol(cad.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_basica ::= IDEN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_basica ::= NULL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.null_().ponFila(n.fila()).ponCol(n.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_basica ::= TRUE 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado b = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.true_().ponFila(b.fila()).ponCol(b.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_basica ::= FALSE 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado b = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.false_().ponFila(b.fila()).ponCol(b.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= E0 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E0 ::= E1 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E0 ::= E1 op0 E0 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E1 ::= E2 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E1 ::= E1 op1 E2 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E2 ::= E3 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",36, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E2 op2_izq E3 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",36, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E2 ::= E2 op2_noasoc E3 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",36, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E3 ::= E4 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",37, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E3 ::= E4 op3_der E3 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",37, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E3 ::= E4 op3_noasoc E4 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",37, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= E5 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E4 ::= E4 op4 E5 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), exp1, exp2).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= E6 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",39, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E5 ::= op5 E5 
            {
              Exp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopun(op.str(), exp).ponFila(op.fila()).ponCol(op.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",39, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E6 ::= E7 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E6 ::= E6 CORCH_A expresion CORCH_C 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		int corchleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int corchright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		StringLocalizado corch = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Exp)sem.indexacion(exp1, exp2).ponFila(corch.fila()).ponCol(corch.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E6 ::= E6 PUNTO IDEN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.acceso(exp, id.str()).ponFila(id.fila()).ponCol(id.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E6 ::= E6 CAPIROTE 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		int capleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int capright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado cap = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.indireccion(exp).ponFila(cap.fila()).ponCol(cap.columna()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E7 ::= PAR_A E0 PAR_C 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E7 ::= expresion_basica 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op0 ::= IGUAL_OP 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op0",42, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op1 ::= IGUAL_COMP 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op1 ::= NOIGUAL_COMP 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op1 ::= MENORQUE 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // op1 ::= MAYORQUE 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op1 ::= MENORIGUAL 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // op1 ::= MAYORIGUAL 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // op2_izq ::= SUMA 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op2_izq",44, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op2_noasoc ::= RESTA 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op2_noasoc",45, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // op3_der ::= AND 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op3_der",46, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // op3_noasoc ::= OR 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op3_noasoc",47, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // op4 ::= MULT 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",48, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // op4 ::= DIV 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",48, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // op4 ::= PORCENTAJE 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",48, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op5 ::= RESTA 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",49, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op5 ::= NOT 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",49, ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTTiny$do_action_part00000000(
                               CUP$ConstructorASTTiny$act_num,
                               CUP$ConstructorASTTiny$parser,
                               CUP$ConstructorASTTiny$stack,
                               CUP$ConstructorASTTiny$top);
    }
}

}
