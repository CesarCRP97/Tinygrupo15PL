/* Generated By:JavaCC: Do not edit this line. ConstructorASTsTinyConstants.java */
package c_ast_descendente;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ConstructorASTsTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int caracter = 2;
  /** RegularExpression Id. */
  int digitoPositivo = 3;
  /** RegularExpression Id. */
  int digito = 4;
  /** RegularExpression Id. */
  int parteEntera = 5;
  /** RegularExpression Id. */
  int parteDecimal = 6;
  /** RegularExpression Id. */
  int segParteReal = 7;
  /** RegularExpression Id. */
  int parteExponencial = 8;
  /** RegularExpression Id. */
  int bool = 11;
  /** RegularExpression Id. */
  int real = 12;
  /** RegularExpression Id. */
  int INT = 13;
  /** RegularExpression Id. */
  int string = 14;
  /** RegularExpression Id. */
  int and = 15;
  /** RegularExpression Id. */
  int or = 16;
  /** RegularExpression Id. */
  int not = 17;
  /** RegularExpression Id. */
  int NULL = 18;
  /** RegularExpression Id. */
  int TRUE = 19;
  /** RegularExpression Id. */
  int FALSE = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int struct = 24;
  /** RegularExpression Id. */
  int NEW = 25;
  /** RegularExpression Id. */
  int delete = 26;
  /** RegularExpression Id. */
  int read = 27;
  /** RegularExpression Id. */
  int write = 28;
  /** RegularExpression Id. */
  int nl = 29;
  /** RegularExpression Id. */
  int type = 30;
  /** RegularExpression Id. */
  int call = 31;
  /** RegularExpression Id. */
  int proc = 32;
  /** RegularExpression Id. */
  int suma = 33;
  /** RegularExpression Id. */
  int resta = 34;
  /** RegularExpression Id. */
  int mult = 35;
  /** RegularExpression Id. */
  int div = 36;
  /** RegularExpression Id. */
  int porcentaje = 37;
  /** RegularExpression Id. */
  int menorque = 38;
  /** RegularExpression Id. */
  int mayorque = 39;
  /** RegularExpression Id. */
  int menorigual = 40;
  /** RegularExpression Id. */
  int mayorigual = 41;
  /** RegularExpression Id. */
  int igual_comp = 42;
  /** RegularExpression Id. */
  int noigual_comp = 43;
  /** RegularExpression Id. */
  int par_a = 44;
  /** RegularExpression Id. */
  int par_c = 45;
  /** RegularExpression Id. */
  int puntoycoma = 46;
  /** RegularExpression Id. */
  int igual_op = 47;
  /** RegularExpression Id. */
  int corch_a = 48;
  /** RegularExpression Id. */
  int corch_c = 49;
  /** RegularExpression Id. */
  int punto = 50;
  /** RegularExpression Id. */
  int capirote = 51;
  /** RegularExpression Id. */
  int coma = 52;
  /** RegularExpression Id. */
  int llave_a = 53;
  /** RegularExpression Id. */
  int llave_c = 54;
  /** RegularExpression Id. */
  int dobleampersand = 55;
  /** RegularExpression Id. */
  int ampersand = 56;
  /** RegularExpression Id. */
  int arroba = 57;
  /** RegularExpression Id. */
  int litEntero = 58;
  /** RegularExpression Id. */
  int litReal = 59;
  /** RegularExpression Id. */
  int litCadena = 60;
  /** RegularExpression Id. */
  int iden = 61;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<caracter>",
    "<digitoPositivo>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<segParteReal>",
    "<parteExponencial>",
    "<token of kind 9>",
    "<token of kind 10>",
    "\"bool\"",
    "\"real\"",
    "\"int\"",
    "\"string\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"struct\"",
    "\"new\"",
    "\"delete\"",
    "\"read\"",
    "\"write\"",
    "\"nl\"",
    "\"type\"",
    "\"call\"",
    "\"proc\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"^\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"&&\"",
    "\"&\"",
    "\"@\"",
    "<litEntero>",
    "<litReal>",
    "<litCadena>",
    "<iden>",
  };

}
