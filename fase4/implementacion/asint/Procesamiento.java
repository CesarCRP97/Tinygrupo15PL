package asint;

import asint.SintaxisAbstractaTiny.*;

public interface Procesamiento {
    void procesa(Prog prog);
	void procesa1(Prog prog);
	void procesa2(Prog prog);
    void procesa(Bloque bloque);
	void procesa1(Bloque bloque);
	void procesa2(Bloque bloque);
    void procesa(Si_decs decs);
	void procesa1(Si_decs decs);
	void procesa2(Si_decs decs);
    void procesa(No_decs decs);
	void procesa1(No_decs decs);
	void procesa2(No_decs decs);
    void procesa(Muchas_decs decs);
	void procesa1(Muchas_decs decs);
	void procesa2(Muchas_decs decs);
    void procesa(Una_dec dec);
	void procesa1(Una_dec dec);
	void procesa2(Una_dec dec);
    void procesa(Dec_variable dec);
	void procesa1(Dec_variable dec);
	void procesa2(Dec_variable dec);
    void procesa(Dec_tipo dec);
	void procesa1(Dec_tipo dec);
	void procesa2(Dec_tipo dec);
    void procesa(Dec_proc dec);
	void procesa1(Dec_proc dec);
	void procesa2(Dec_proc dec);
    void procesa(Si_params_form params);
	void procesa1(Si_params_form params);
	void procesa2(Si_params_form params);
    void procesa(No_params_form params);
	void procesa1(No_params_form params);
	void procesa2(No_params_form params);
    void procesa(Muchos_params_form params);
	void procesa1(Muchos_params_form params);
	void procesa2(Muchos_params_form params);
    void procesa(Un_param_form params);
	void procesa1(Un_param_form params);
	void procesa2(Un_param_form params);
    void procesa(Param_form_normal param);
	void procesa1(Param_form_normal param);
	void procesa2(Param_form_normal param);
    void procesa(Param_form_ref param);
	void procesa1(Param_form_ref param);
	void procesa2(Param_form_ref param);
    void procesa(Tipo_int tipo);
	void procesa1(Tipo_int tipo);
	void procesa2(Tipo_int tipo);
    void procesa(Tipo_bool tipo);
	void procesa1(Tipo_bool tipo);
	void procesa2(Tipo_bool tipo);
    void procesa(Tipo_real tipo);
	void procesa1(Tipo_real tipo);
	void procesa2(Tipo_real tipo);
    void procesa(Tipo_array tipo);
	void procesa1(Tipo_array tipo);
	void procesa2(Tipo_array tipo);
    void procesa(Tipo_string tipo);
	void procesa1(Tipo_string tipo);
	void procesa2(Tipo_string tipo);
    void procesa(Tipo_puntero tipo);
	void procesa1(Tipo_puntero tipo);
	void procesa2(Tipo_puntero tipo);
    void procesa(Tipo_struct tipo);
	void procesa1(Tipo_struct tipo);
	void procesa2(Tipo_struct tipo);
    void procesa(Tipo_iden tipo);
	void procesa1(Tipo_iden tipo);
	void procesa2(Tipo_iden tipo);
    void procesa(Campos campos);
	void procesa1(Campos campos);
	void procesa2(Campos campos);
    void procesa(Muchos_campos campos);
	void procesa1(Muchos_campos campos);
	void procesa2(Muchos_campos campos);
    void procesa(Un_campo campo);
	void procesa1(Un_campo campo);
	void procesa2(Un_campo campo);
    void procesa(Campo campo);
	void procesa1(Campo campo);
	void procesa2(Campo campo);
    void procesa(Si_instrs instrs);
	void procesa1(Si_instrs instrs);
	void procesa2(Si_instrs instrs);
    void procesa(No_instrs instrs);
	void procesa1(No_instrs instrs);
	void procesa2(No_instrs instrs);
    void procesa(Muchas_instrs instrs);
	void procesa1(Muchas_instrs instrs);
	void procesa2(Muchas_instrs instrs);
    void procesa(Una_instr instr);
	void procesa1(Una_instr instr);
	void procesa2(Una_instr instr);
    void procesa(Eval instr);
	void procesa1(Eval instr);
	void procesa2(Eval instr);
    void procesa(If instr);
	void procesa1(If instr);
	void procesa2(If instr);
    void procesa(IfElse instr);
	void procesa1(IfElse instr);
	void procesa2(IfElse instr);
    void procesa(While instr);
	void procesa1(While instr);
	void procesa2(While instr);
    void procesa(Read instr);
	void procesa1(Read instr);
	void procesa2(Read instr);
    void procesa(Write instr);
	void procesa1(Write instr);
	void procesa2(Write instr);
    void procesa(NL instr);
	void procesa1(NL instr);
	void procesa2(NL instr);
    void procesa(New instr);
	void procesa1(New instr);
	void procesa2(New instr);
    void procesa(Delete instr);
	void procesa1(Delete instr);
	void procesa2(Delete instr);
    void procesa(Instr_compuesta instr);
	void procesa1(Instr_compuesta instr);
	void procesa2(Instr_compuesta instr);
    void procesa(Invoc instr);
	void procesa1(Invoc instr);
	void procesa2(Invoc instr);
    void procesa(Si_params_reales params);
	void procesa1(Si_params_reales params);
	void procesa2(Si_params_reales params);
    void procesa(No_params_reales params);
	void procesa1(No_params_reales params);
	void procesa2(No_params_reales params);
    void procesa(Muchos_params_reales params);
	void procesa1(Muchos_params_reales params);
	void procesa2(Muchos_params_reales params);
    void procesa(Un_param_real params);
	void procesa1(Un_param_real params);
	void procesa2(Un_param_real params);
    void procesa(Asignacion exp);
	void procesa1(Asignacion exp);
	void procesa2(Asignacion exp);
    void procesa(Igual_comp exp);
	void procesa1(Igual_comp exp);
	void procesa2(Igual_comp exp);
    void procesa(Distinto_comp exp);
	void procesa1(Distinto_comp exp);
	void procesa2(Distinto_comp exp);
    void procesa(Menor_que exp);
	void procesa1(Menor_que exp);
	void procesa2(Menor_que exp);
    void procesa(Mayor_que exp);
	void procesa1(Mayor_que exp);
	void procesa2(Mayor_que exp);
    void procesa(Menor_igual exp);
	void procesa1(Menor_igual exp);
	void procesa2(Menor_igual exp);
    void procesa(Mayor_igual exp);
	void procesa1(Mayor_igual exp);
	void procesa2(Mayor_igual exp);
    void procesa(Suma exp);
	void procesa1(Suma exp);
	void procesa2(Suma exp);
    void procesa(Resta exp);
	void procesa1(Resta exp);
	void procesa2(Resta exp);
    void procesa(And exp);
	void procesa1(And exp);
	void procesa2(And exp);
    void procesa(Or exp);
	void procesa1(Or exp);
	void procesa2(Or exp);
    void procesa(Mul exp);
	void procesa1(Mul exp);
	void procesa2(Mul exp);
    void procesa(Div exp);
	void procesa1(Div exp);
	void procesa2(Div exp);
    void procesa(Mod exp);
	void procesa1(Mod exp);
	void procesa2(Mod exp);
    void procesa(Menos_unario exp);
	void procesa1(Menos_unario exp);
	void procesa2(Menos_unario exp);
    void procesa(Not exp);
	void procesa1(Not exp);
	void procesa2(Not exp);
    void procesa(Indexacion exp);
	void procesa1(Indexacion exp);
	void procesa2(Indexacion exp);
    void procesa(Acceso exp);
	void procesa1(Acceso exp);
	void procesa2(Acceso exp);
    void procesa(Indireccion exp);
	void procesa1(Indireccion exp);
	void procesa2(Indireccion exp);
    void procesa(Lit_ent exp);
	void procesa1(Lit_ent exp);
	void procesa2(Lit_ent exp);
    void procesa(Lit_real exp);
	void procesa1(Lit_real exp);
	void procesa2(Lit_real exp);
    void procesa(True exp);
	void procesa1(True exp);
	void procesa2(True exp);
    void procesa(False exp);
	void procesa1(False exp);
	void procesa2(False exp);
    void procesa(Lit_cadena exp);
	void procesa1(Lit_cadena exp);
	void procesa2(Lit_cadena exp);
    void procesa(Iden exp);
	void procesa1(Iden exp);
	void procesa2(Iden exp);
    void procesa(Null exp);
	void procesa1(Null exp);
	void procesa2(Null exp);
    void procesa(String str);
	void procesa1(String str);
	void procesa2(String str);
}
