package asint;

import java_cup.runtime.*;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import alex.AnalizadorLexicoTiny;
scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal	BOOL, REAL, INT, STRING, AND, OR, NOT, NULL, 
			TRUE, FALSE, IF, ELSE, WHILE, STRUCT, NEW, 
			DELETE, READ, WRITE, NL, TYPE, CALL, PROC,
			SUMA, RESTA, MULT, DIV, PORCENTAJE, MENORQUE,
			MAYORQUE, MENORIGUAL, MAYORIGUAL, IGUAL_COMP,
			NOIGUAL_COMP, PAR_A, PAR_C, PUNTYCOMA, IGUAL_OP,
			CORCH_A, CORCH_C, PUNTO, CAPIROTE, COMA, LLAVE_A,
			LLAVE_C, DOBLEAMPERSAND, AMPERSAND, ARROBA, LIT_REAL,
			LIT_CADENA, LIT_ENTERO,IDEN;

non terminal programa, bloque, declaraciones_opt, instrucciones_opt,
             declaraciones, lista_declaraciones, declaracion,
             dec_variable, dec_tipo, dec_procedimiento,
             parametros_form, parametros_form_lista_opt, parametros_form_lista,
             parametro_form, ampersand_opt, tipo, tipo0, tipo1,
             tipo2, campos, campos_lista, campo, tipo_puntero,
             instrucciones, instruccion, instr_eval, instr_if,
             instr_if_else, instr_while, instr_read, instr_write,
             instr_nl, instr_reserva, instr_liberacion, instr_invocacion,
             instr_compuesta, expresion, expresion_basica, expresion_compuesta,
             e0, e1, e2, e3, e4, e5, e6, e7, op0, op1, op2_izq,
             op2_noasoc, op3_der, op3_noasoc, op4, op5, op6,
             op_indexacion, op_acceso_registro, op_indireccion;

programa ::= bloque;

bloque ::= LLAVE_A declaraciones_opt instrucciones_opt LLAVE_C;

declaraciones_opt ::= declaraciones | ;

instrucciones_opt ::= instrucciones | ;

declaraciones ::= lista_declaraciones DOBLEAMPERSAND;

lista_declaraciones ::= declaracion | lista_declaraciones PUNTYCOMA declaracion;

declaracion ::= dec_variable | dec_tipo | dec_procedimiento;

dec_variable ::= tipo IDEN;

dec_tipo ::= TYPE tipo IDEN;

dec_procedimiento ::= PROC IDEN parametros_form bloque;

parametros_form ::= PAR_A parametros_form_lista_opt PAR_C;

parametros_form_lista_opt ::= parametros_form_lista | ;

parametros_form_lista ::= parametro_form | parametros_form_lista COMA parametro_form;

parametro_form ::= tipo ampersand_opt IDEN;

ampersand_opt ::= AMPERSAND | ;

tipo ::= tipo0;

tipo0 ::= tipo0 CORCH_A LIT_ENTERO CORCH_C | tipo1;

tipo1 ::= tipo2 | CAPIROTE tipo1;

tipo2 ::= INT | REAL | BOOL | STRING | STRUCT campos | IDEN;

campos ::= LLAVE_A campos_lista LLAVE_C;

campos_lista ::= campo | campos_lista COMA campo;

campo ::= tipo IDEN;

tipo_puntero ::= CAPIROTE tipo_basico;

instrucciones ::= instruccion | instrucciones PUNTYCOMA instruccion;

instruccion ::= instr_eval | instr_if | instr_if_else | instr_while | instr_read | instr_write | instr_nl | instr_reserva | instr_liberacion | instr_invocacion | instr_compuesta;

instr_eval ::= ARROBA expresion;

instr_if ::= IF expresion bloque;

instr_if_else ::= IF expresion bloque ELSE bloque;

instr_while ::= WHILE expresion bloque;

instr_read ::= READ expresion;

instr_write ::= WRITE expresion;

instr_nl ::= NL;

instr_reserva ::= NEW expresion;

instr_liberacion ::= DELETE expresion;

instr_invocacion ::= CALL IDEN parametros_reales;

parametros_reales ::= PAR_A parametros_reales_lista_opt PAR_C;

parametros_reales_lista_opt ::= parametros_reales_lista | ;

parametros_reales_lista ::= expresion | parametros_reales_lista COMA expresion;

instr_compuesta ::= bloque;

expresion ::= expresion_basica | expresion_compuesta;

expresion_basica ::= LIT_ENTERO | LIT_REAL | LIT_CADENA | IDEN | NULL | TRUE | FALSE;

expresion_compuesta ::= E0;

E0 ::= E1 | E1 op0 E0;

E1 ::= E2 | E1 op1 E2;

E2 ::= E3 | E2 op2_izq E3 | E2 op2_noasoc E3;

E3 ::= E4 | E3 op3_der E3 | E3 op3_noasoc E4;

E4 ::= E5 | E4 op4 E5;

E5 ::= E6 | op5 E5;

E6 ::= E7 | E6 op6;

E7 ::= PAR_A E0 PAR_C | expresion_basica;

op0 ::= IGUAL_OP;

op1 ::= IGUAL_COMP | NOIGUAL_COMP | MENORQUE | MAYORQUE | MENORIGUAL | MAYORIGUAL;

op2_izq ::= SUMA;

op2_noasoc ::= RESTA;

op3_der ::= AND;

op3_noasoc ::= OR;

op4 ::= MULT | DIV | PORCENTAJE;

op5 ::= RESTA | NOT;

op6 ::= op_indexacion | op_acceso_registro | op_indireccion;

op_indexacion ::= CORCH_A expresion CORCH_C;

op_acceso_registro ::= PUNTO IDEN;

op_indireccion ::= CAPIROTE;