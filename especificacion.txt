imprime(prog(Decs, Instrs)):
    print "{"
    nl
    imprime(Decs)
    imprime(Instrs)
    print "}"
    nl

imprime(si_decs(LDecs)):
    imprime(LDecs)
    print "&&"
    nl

imprime(no_decs()):
    pass

imprime(muchas_decs(LDecs, Dec)):
    imprime(LDecs)
    print ","
    nl
    imprime(Dec)

imprime(una_dec(Dec)):
    imprime(Dec)

imprime(dec_variable(Tipo, Ident)):
    imprime(Tipo)
    print Ident
    nl
    print ";"
    nl

imprime(dec_tipo(Tipo, Ident)):
    print "<type>"
    nl
    imprime(Tipo)
    print Ident
    nl
    print ";"
    nl

imprime(dec_proc(Ident, Params_form, Prog)):
    print "<proc>"
    nl
    print Ident
    nl
    imprime(Params_form)
    imprime(Prog)
    print ";"
    nl

imprime(si_param_form(LParams_form)):
    print "("
    nl
    imprime(LParams_form)
    print ")"
    nl

imprime(no_param_form()):
    print "()"
    nl

imprime(muchos_param_form(LParams_form, Param_form)):
    imprime(LParams_form)
    print ","
    nl
    imprime(Param_form)

imprime(un_param_form(Param_form)):
    imprime(Param_form)

imprime(param_form(Tipo, Ident)):
    imprime(Tipo)
    print Ident
    nl

imprime(param_form_ref(Tipo, Ident)):
    imprime(Tipo)
    print "&"
    nl
    print Ident
    nl

imprime(tipo_array(Tipo, Lit_ent)):
    imprime(Tipo)
    print "["
    nl
    imprime(Lit_ent)
    print "]"
    nl
    imprime(Tipo)

imprime(tipo_puntero(Tipo)):
    print "^"
    nl
    imprime(Tipo)

imprime(tipo_int()):
    print "<int>"
    nl

imprime(tipo_real()):
    print "<real>"
    nl

imprime(tipo_bool()):
    print "<bool>"
    nl

imprime(tipo_string()):
    print "<string>"
    nl

imprime(tipo_struct(LCampos)):
    print "<struct>"
    nl
    print "{"
    nl
    imprime(LCampos)
    print "}"
    nl

imprime(un_campo(Campo)):
    imprime(Campo)

imprime(muchos_campos(LCampos, Campo)):
    imprime(LCampos)
    print ","
    nl
    imprime(Campo)

imprime(campo(Tipo, Ident)):
    imprime(Tipo)
    print Ident
    nl

imprime(si_instrs(LInstrs)):
    imprime(LInstrs)

imprime(no_instrs()):
    pass

imprime(muchas_instrs(LInstrs, Instr)):
    imprime(LInstrs)
    print ";"
    nl
    imprime(Instr)

imprime(una_instr(Instr)):
    imprime(Instr)

imprime(instr_eval(Exp)):
    print "@"
    nl
    imprime(Exp)

imprime(instr_if(Exp, Prog)):
    print "<if>"
    nl
    imprime(Exp)
    imprime(Prog)

imprime(instr_else(Exp, Prog1, Prog2)):
    print "<if>"
    nl
    imprime(Exp)
    imprime(Prog1)
    print "<else>"
    nl
    imprime(Prog2)

imprime(instr_while(Exp, Prog)):
    print "<while>"
    nl
    imprime(Exp)
    imprime(Prog)

imprime(instr_read(Exp)):
    print "<read>"
    nl
    imprime(Exp)

imprime(instr_write(Exp)):
    print "<write>"
    nl
    imprime(Exp) 

imprime(instr_nl()):
    print "<nl>"
    nl

imprime(instr_delete(Exp)):
    print "<delete>"
    nl
    imprime(Exp)

imprime(instr_new(Exp)):
    print "<new>"
    nl
    imprime(Exp)

imprime(instr_comp(Prog)):
    imprime(Prog)

imprime(instr_invoc(Ident, Param_reales)):
    print "<call>"
    nl
    print Ident
    nl
    imprime(Param_reales)

imprime(si_param_reales(LParam_reales)):
    print "("
    nl
    imprime(LParam_reales)
    print ")"  
    nl

imprime(no_param_reales()):
    print "()" 
    nl

imprime(muchos_param_reales(LParam_reales, Exp)):
    imprime(LParam_reales)
    print ","
    nl
    imprime(Exp)

imprime(un_param_real(Exp)):
    imprime(Exp)

imprimeExpBin(Opnd0, Op, Opnd1, np0, np1):
    imprimeOpnd(Opnd0, np0)
    print Op
    nl
    imprimeOpnd(Opnd1, np1)

imprimeExpUnIzq(Op, Opnd, np):
    print Op
    nl
    imprimeOpnd(Opnd, np)

imprimeOpnd(Opnd, MinPrior):
    if prioridad(Opnd) < MinPrior:
        print "("
        nl
        imprime(Opnd)
        print ")"
        nl
    else:
        imprime(Opnd)

prioridad(asignacion(_,_))):
    return 0

prioridad(igual_comp(_,_))
    return 1

prioridad(dist_comp(_,_)):
    return 1

prioridad(mayorque(_,_)):
    return 1

prioridad(menorque(_,_)):
    return 1

prioridad(mayorigual(_,_)):
    return 1

prioridad(menorigual(_,_)):
    return 1

prioridad(suma(_,_)):
    return 2

prioridad(resta(_,_)):
    return 2

prioridad(and(_,_)):
    return 3

prioridad(or(_,_)):
    return 3

prioridad(mult(_,_)):
    return 4

prioridad(div(_,_)):
    return 4

prioridad(mod(_,_)):
    return 4

prioridad(menos_unario(_):
    return 5

prioridad(not(_)):
    return 5

prioridad(index(_,_)):
    return 6

prioridad(acceso(_,_)):
    return 6

prioridad(indireccion(_)):
    return 6

imprime(asignacion(Exp, Exp)):
    imprimeExpBin(Exp, Exp, "=", 1, 0)

imprime(igual_comp(Exp, Exp)):
    imprimeExpBin(Exp, "==", Exp, 1, 2)

imprime(dist_comp(Exp, Exp)):
    imprimeExpBin(Exp, "!=", Exp, 1, 2)

imprime(mayorque(Exp, Exp)):
    imprimeExpBin(Exp, ">", Exp, 1, 2)

imprime(menorque(Exp, Exp)): 
    imprimeExpBin(Exp, "<", Exp, 1, 2)

imprime(mayorigual(Exp, Exp)):
    imprimeExpBin(Exp, ">=", Exp, 1, 2)

imprime(menorigual(Exp, Exp)):
    imprimeExpBin(Exp, "<=", Exp, 1, 2)

imprime(suma(Exp, Exp)):
    imprimeExpBin(Exp, "+", Exp, 2, 3)

imprime(resta(Exp, Exp)):
    imprimeExpBin(Exp, "-", Exp, 3, 3)
    
imprime(and(Exp, Exp)):
    imprimeExpBin(Exp, "and", Exp, 4, 3)

imprime(or(Exp, Exp)):
    imprimeExpBin(Exp, "or", Exp, 4, 4)

imprime(mult(Exp, Exp)):
    imprimeExpBin(Exp, "*", Exp, 4, 5)

imprime(div(Exp, Exp)):
    imprimeExpBin(Exp, "/", Exp, 4, 5)

imprime(mod(Exp, Exp)):
    imprimeExpBin(Exp, "%", Exp, 4, 5)

imprime(menos(Exp)):
    imprimeExpUnIzq("-", Exp, 5)

imprime(not(Exp)):
    imprimeExpUnIzq("not", Exp, 5)

imprime(index(Exp, Exp)):
    imprimeOpnd(Exp, 6)
    print "["
    nl
    imprime(Exp)
    print "]"
    nl

imprime(acceso(Exp, Iden)):
    imprimeOpnd(Exp, 6)
    print "."
    nl
    print Iden
    nl

imprime(indir(Exp)):
    imprimeOpnd(Exp, 6)
    print "^"
    nl


imprime(lit_ent(LitEnt)):
    print LitEnt
    nl

imprime(lit_real(LitReal)):
    print LitReal
    nl

imprime(lit_true()):
    print "<true>"
    nl

imprime(lit_false()):
    print "<false>"
    nl

imprime(lit_cadena(LitCadena)):
    print LitCadena
    nl

imprime(iden(Ident)):
    print Ident
    nl

imprime(null()):
    print "<null>"
    nl

